// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Aレジスタに入れるデータを決める
    Mux16(a=instruction,b=alu2,sel=instruction[15],out=v);

    // A命令 or d1=true ならAレジスタにデータを保存する
    Not(in=instruction[15],out=insA);
    Or(a=insA,b=instruction[5],out=decodeA);
    ARegister(in=v,load=decodeA,out=a1,out=a2,out[0..14]=addressM);

    // A or M
    // C命令である必要がある
    And(a=instruction[15],b=instruction[12],out=decodeAM);
    Mux16(a=a1,b=inM,sel=decodeAM,out=am);

    // A命令だったらALUの関数はx&yにしたい
    And(a=instruction[15],b=instruction[11],out=decodeZx);
    And(a=instruction[15],b=instruction[10],out=decodeNx);
    And(a=instruction[15],b=instruction[9],out=decodeZy);
    And(a=instruction[15],b=instruction[8],out=decodeNy);
    And(a=instruction[15],b=instruction[7],out=decodeF);
    And(a=instruction[15],b=instruction[6],out=decodeNo);
    // 計算を行う関数を決める
    ALU(x=d,y=am,zx=decodeZx,nx=decodeNx,zy=decodeZy,ny=decodeNy,f=decodeF,no=decodeNo,out=alu1,out=alu2,out=outM,zr=aluZr,ng=aluNg);
    
    And(a=instruction[15],b=instruction[4],out=decodeD);
    DRegister(in=alu1,load=decodeD,out=d);

    // A命令だったらjumpしない
    And(a=instruction[15],b=instruction[2],out=decodeJ1);
    And(a=instruction[15],b=instruction[1],out=decodeJ2);
    And(a=instruction[15],b=instruction[0],out=decodeJ3);
    And(a=decodeJ1,b=aluNg,out=jumpNg);
    And(a=decodeJ2,b=aluZr,out=jumpZr);
    Or(a=aluNg,b=aluZr,out=w);
    Not(in=w,out=aluPs);
    And(a=decodeJ3,b=aluPs,out=jumpPs);
    Or(a=jumpNg,b=jumpZr,out=jumpNgZr);
    Or(a=jumpNgZr,b=jumpPs,out=jump,out=tmp);
    Not(in=tmp,out=decodeInc);
    // C命令である必要がある
    PC(in=a2,load=jump,inc=decodeInc,reset=reset,out[0..14]=pc);

    And(a=instruction[15],b=instruction[3],out=writeM);
}
